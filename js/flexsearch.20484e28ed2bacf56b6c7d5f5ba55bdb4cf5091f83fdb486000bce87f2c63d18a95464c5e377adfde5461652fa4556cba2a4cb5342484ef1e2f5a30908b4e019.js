(()=>{var ae=Object.create;var te=Object.defineProperty;var ie=Object.getOwnPropertyDescriptor;var se=Object.getOwnPropertyNames;var re=Object.getPrototypeOf,le=Object.prototype.hasOwnProperty;var ue=(e,o)=>()=>(o||e((o={exports:{}}).exports,o),o.exports);var he=(e,o,n,i)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of se(o))!le.call(e,s)&&s!==n&&te(e,s,{get:()=>o[s],enumerable:!(i=ie(o,s))||i.enumerable});return e};var de=(e,o,n)=>(n=e!=null?ae(re(e)):{},he(o||!e||!e.__esModule?te(n,"default",{value:e,enumerable:!0}):n,e));var oe=ue((exports,module)=>{(function _f(self){"use strict";try{module&&(self=module)}catch(e){}self._factory=_f;var t;function u(e){return typeof e!="undefined"?e:!0}function aa(e){let o=Array(e);for(let n=0;n<e;n++)o[n]=v();return o}function v(){return Object.create(null)}function ba(e,o){return o.length-e.length}function x(e){return typeof e=="string"}function C(e){return typeof e=="object"}function D(e){return typeof e=="function"}function ca(e,o){var n=da;if(e&&(o&&(e=E(e,o)),this.H&&(e=E(e,this.H)),this.J&&1<e.length&&(e=E(e,this.J)),n||n==="")){if(e=e.split(n),this.filter){o=this.filter,n=e.length;let i=[];for(let s=0,r=0;s<n;s++){let l=e[s];l&&!o[l]&&(i[r++]=l)}e=i}return e}return e}let da=/[\p{Z}\p{S}\p{P}\p{C}]+/u,ea=/[\u0300-\u036f]/g;function fa(e,o){let n=Object.keys(e),i=n.length,s=[],r="",l=0;for(let h=0,p,f;h<i;h++)p=n[h],(f=e[p])?(s[l++]=F(o?"(?!\\b)"+p+"(\\b|_)":p),s[l++]=f):r+=(r?"|":"")+p;return r&&(s[l++]=F(o?"(?!\\b)("+r+")(\\b|_)":"("+r+")"),s[l]=""),s}function E(e,o){for(let n=0,i=o.length;n<i&&(e=e.replace(o[n],o[n+1]),e);n+=2);return e}function F(e){return new RegExp(e,"g")}function ha(e){let o="",n="";for(let i=0,s=e.length,r;i<s;i++)(r=e[i])!==n&&(o+=n=r);return o}var ja={encode:ia,F:!1,G:""};function ia(e){return ca.call(this,(""+e).toLowerCase(),!1)}let ka={},G={};function la(e){I(e,"add"),I(e,"append"),I(e,"search"),I(e,"update"),I(e,"remove")}function I(e,o){e[o+"Async"]=function(){let n=this,i=arguments;var s=i[i.length-1];let r;return D(s)&&(r=s,delete i[i.length-1]),s=new Promise(function(l){setTimeout(function(){n.async=!0;let h=n[o].apply(n,i);n.async=!1,l(h)})}),r?(s.then(r),this):s}}function ma(e,o,n,i){let s=e.length,r=[],l,h,p=0;i&&(i=[]);for(let f=s-1;0<=f;f--){let g=e[f],k=g.length,y=v(),B=!l;for(let m=0;m<k;m++){let w=g[m],A=w.length;if(A)for(let R=0,_,q;R<A;R++)if(q=w[R],l){if(l[q]){if(!f){if(n)n--;else if(r[p++]=q,p===o)return r}(f||i)&&(y[q]=1),B=!0}if(i&&(_=(h[q]||0)+1,h[q]=_,_<s)){let z=i[_-2]||(i[_-2]=[]);z[z.length]=q}}else y[q]=1}if(i)l||(h=y);else if(!B)return[];l=y}if(i)for(let f=i.length-1,g,k;0<=f;f--){g=i[f],k=g.length;for(let y=0,B;y<k;y++)if(B=g[y],!l[B]){if(n)n--;else if(r[p++]=B,p===o)return r;l[B]=1}}return r}function na(e,o){let n=v(),i=v(),s=[];for(let r=0;r<e.length;r++)n[e[r]]=1;for(let r=0,l;r<o.length;r++){l=o[r];for(let h=0,p;h<l.length;h++)p=l[h],n[p]&&!i[p]&&(i[p]=1,s[s.length]=p)}return s}function J(e){this.l=e!==!0&&e,this.cache=v(),this.h=[]}function oa(e,o,n){C(e)&&(e=e.query);let i=this.cache.get(e);return i||(i=this.search(e,o,n),this.cache.set(e,i)),i}J.prototype.set=function(e,o){if(!this.cache[e]){var n=this.h.length;for(n===this.l?delete this.cache[this.h[n-1]]:n++,--n;0<n;n--)this.h[n]=this.h[n-1];this.h[0]=e}this.cache[e]=o},J.prototype.get=function(e){let o=this.cache[e];if(this.l&&o&&(e=this.h.indexOf(e))){let n=this.h[e-1];this.h[e-1]=this.h[e],this.h[e]=n}return o};let qa={memory:{charset:"latin:extra",D:3,B:4,m:!1},performance:{D:3,B:3,s:!1,context:{depth:2,D:1}},match:{charset:"latin:extra",G:"reverse"},score:{charset:"latin:advanced",D:20,B:3,context:{depth:3,D:9}},default:{}};function ra(e,o,n,i,s,r,l){setTimeout(function(){let h=e(n?n+"."+i:i,JSON.stringify(l));h&&h.then?h.then(function(){o.export(e,o,n,s,r+1)}):o.export(e,o,n,s,r+1)})}function K(e,o){if(!(this instanceof K))return new K(e);var n;if(e){x(e)?e=qa[e]:(n=e.preset)&&(e=Object.assign({},n[n],e)),n=e.charset;var i=e.lang;x(n)&&(n.indexOf(":")===-1&&(n+=":default"),n=G[n]),x(i)&&(i=ka[i])}else e={};let s,r,l=e.context||{};if(this.encode=e.encode||n&&n.encode||ia,this.register=o||v(),this.D=s=e.resolution||9,this.G=o=n&&n.G||e.tokenize||"strict",this.depth=o==="strict"&&l.depth,this.l=u(l.bidirectional),this.s=r=u(e.optimize),this.m=u(e.fastupdate),this.B=e.minlength||1,this.C=e.boost,this.map=r?aa(s):v(),this.A=s=l.resolution||1,this.h=r?aa(s):v(),this.F=n&&n.F||e.rtl,this.H=(o=e.matcher||i&&i.H)&&fa(o,!1),this.J=(o=e.stemmer||i&&i.J)&&fa(o,!0),n=o=e.filter||i&&i.filter){n=o,i=v();for(let h=0,p=n.length;h<p;h++)i[n[h]]=1;n=i}this.filter=n,this.cache=(o=e.cache)&&new J(o)}t=K.prototype,t.append=function(e,o){return this.add(e,o,!0)},t.add=function(e,o,n,i){if(o&&(e||e===0)){if(!i&&!n&&this.register[e])return this.update(e,o);if(o=this.encode(o),i=o.length){let f=v(),g=v(),k=this.depth,y=this.D;for(let B=0;B<i;B++){let m=o[this.F?i-1-B:B];var s=m.length;if(m&&s>=this.B&&(k||!g[m])){var r=L(y,i,B),l="";switch(this.G){case"full":if(2<s){for(r=0;r<s;r++)for(var h=s;h>r;h--)if(h-r>=this.B){var p=L(y,i,B,s,r);l=m.substring(r,h),M(this,g,l,p,e,n)}break}case"reverse":if(1<s){for(h=s-1;0<h;h--)l=m[h]+l,l.length>=this.B&&M(this,g,l,L(y,i,B,s,h),e,n);l=""}case"forward":if(1<s){for(h=0;h<s;h++)l+=m[h],l.length>=this.B&&M(this,g,l,r,e,n);break}default:if(this.C&&(r=Math.min(r/this.C(o,m,B)|0,y-1)),M(this,g,m,r,e,n),k&&1<i&&B<i-1){for(s=v(),l=this.A,r=m,h=Math.min(k+1,i-B),s[r]=1,p=1;p<h;p++)if((m=o[this.F?i-1-B-p:B+p])&&m.length>=this.B&&!s[m]){s[m]=1;let w=this.l&&m>r;M(this,f,w?r:m,L(l+(i/2>l?0:1),i,B,h-1,p-1),e,n,w?m:r)}}}}}this.m||(this.register[e]=1)}}return this};function L(e,o,n,i,s){return n&&1<e?o+(i||0)<=e?n+(s||0):(e-1)/(o+(i||0))*(n+(s||0))+1|0:0}function M(e,o,n,i,s,r,l){let h=l?e.h:e.map;(!o[n]||l&&!o[n][l])&&(e.s&&(h=h[i]),l?(o=o[n]||(o[n]=v()),o[l]=1,h=h[l]||(h[l]=v())):o[n]=1,h=h[n]||(h[n]=[]),e.s||(h=h[i]||(h[i]=[])),r&&h.includes(s)||(h[h.length]=s,e.m&&(e=e.register[s]||(e.register[s]=[]),e[e.length]=h)))}t.search=function(e,o,n){n||(!o&&C(e)?(n=e,e=n.query):C(o)&&(n=o));let i=[],s,r,l=0;if(n){e=n.query||e,o=n.limit,l=n.offset||0;var h=n.context;r=n.suggest}if(e&&(e=this.encode(""+e),s=e.length,1<s)){n=v();var p=[];for(let g=0,k=0,y;g<s;g++)if((y=e[g])&&y.length>=this.B&&!n[y])if(this.s||r||this.map[y])p[k++]=y,n[y]=1;else return i;e=p,s=e.length}if(!s)return i;o||(o=100),h=this.depth&&1<s&&h!==!1,n=0;let f;h?(f=e[0],n=1):1<s&&e.sort(ba);for(let g,k;n<s;n++){if(k=e[n],h?(g=sa(this,i,r,o,l,s===2,k,f),r&&g===!1&&i.length||(f=k)):g=sa(this,i,r,o,l,s===1,k),g)return g;if(r&&n===s-1){if(p=i.length,!p){if(h){h=0,n=-1;continue}return i}if(p===1)return ta(i[0],o,l)}}return ma(i,o,l,r)};function sa(e,o,n,i,s,r,l,h){let p=[],f=h?e.h:e.map;if(e.s||(f=ua(f,l,h,e.l)),f){let g=0,k=Math.min(f.length,h?e.A:e.D);for(let y=0,B=0,m,w;y<k&&!((m=f[y])&&(e.s&&(m=ua(m,l,h,e.l)),s&&m&&r&&(w=m.length,w<=s?(s-=w,m=null):(m=m.slice(s),s=0)),m&&(p[g++]=m,r&&(B+=m.length,B>=i))));y++);if(g){if(r)return ta(p,i,0);o[o.length]=p;return}}return!n&&p}function ta(e,o,n){return e=e.length===1?e[0]:[].concat.apply([],e),n||e.length>o?e.slice(n,n+o):e}function ua(e,o,n,i){return n?(i=i&&o>n,e=(e=e[i?o:n])&&e[i?n:o]):e=e[o],e}t.contain=function(e){return!!this.register[e]},t.update=function(e,o){return this.remove(e).add(e,o)},t.remove=function(e,o){let n=this.register[e];if(n){if(this.m)for(let i=0,s;i<n.length;i++)s=n[i],s.splice(s.indexOf(e),1);else N(this.map,e,this.D,this.s),this.depth&&N(this.h,e,this.A,this.s);if(o||delete this.register[e],this.cache){o=this.cache;for(let i=0,s,r;i<o.h.length;i++)r=o.h[i],s=o.cache[r],s.includes(e)&&(o.h.splice(i--,1),delete o.cache[r])}}return this};function N(e,o,n,i,s){let r=0;if(e.constructor===Array)if(s)o=e.indexOf(o),o!==-1?1<e.length&&(e.splice(o,1),r++):r++;else{s=Math.min(e.length,n);for(let l=0,h;l<s;l++)(h=e[l])&&(r=N(h,o,n,i,s),i||r||delete e[l])}else for(let l in e)(r=N(e[l],o,n,i,s))||delete e[l];return r}t.searchCache=oa,t.export=function(e,o,n,i,s){let r,l;switch(s||(s=0)){case 0:if(r="reg",this.m){l=v();for(let h in this.register)l[h]=1}else l=this.register;break;case 1:r="cfg",l={doc:0,opt:this.s?1:0};break;case 2:r="map",l=this.map;break;case 3:r="ctx",l=this.h;break;default:return}return ra(e,o||this,n,r,i,s,l),!0},t.import=function(e,o){if(o)switch(x(o)&&(o=JSON.parse(o)),e){case"cfg":this.s=!!o.opt;break;case"reg":this.m=!1,this.register=o;break;case"map":this.map=o;break;case"ctx":this.h=o}},la(K.prototype);function va(e){e=e.data;var o=self._index;let n=e.args;var i=e.task;switch(i){case"init":i=e.options||{},e=e.factory,o=i.encode,i.cache=!1,o&&o.indexOf("function")===0&&(i.encode=Function("return "+o)()),e?(Function("return "+e)()(self),self._index=new self.FlexSearch.Index(i),delete self.FlexSearch):self._index=new K(i);break;default:e=e.id,o=o[i].apply(o,n),postMessage(i==="search"?{id:e,msg:o}:{id:e})}}let wa=0;function O(e){if(!(this instanceof O))return new O(e);var o;e?D(o=e.encode)&&(e.encode=o.toString()):e={},(o=(self||window)._factory)&&(o=o.toString());let n=typeof window=="undefined"&&self.exports,i=this;this.o=xa(o,n,e.worker),this.h=v(),this.o&&(n?this.o.on("message",function(s){i.h[s.id](s.msg),delete i.h[s.id]}):this.o.onmessage=function(s){s=s.data,i.h[s.id](s.msg),delete i.h[s.id]},this.o.postMessage({task:"init",factory:o,options:e}))}P("add"),P("append"),P("search"),P("update"),P("remove");function P(e){O.prototype[e]=O.prototype[e+"Async"]=function(){let o=this,n=[].slice.call(arguments);var i=n[n.length-1];let s;return D(i)&&(s=i,n.splice(n.length-1,1)),i=new Promise(function(r){setTimeout(function(){o.h[++wa]=r,o.o.postMessage({task:e,id:wa,args:n})})}),s?(i.then(s),this):i}}function xa(a,b,c){let d;try{d=b?eval('new (require("worker_threads")["Worker"])("../dist/node/node.js")'):a?new Worker(URL.createObjectURL(new Blob(["onmessage="+va.toString()],{type:"text/javascript"}))):new Worker(x(c)?c:"worker/worker.js",{type:"module"})}catch(e){}return d}function Q(e){if(!(this instanceof Q))return new Q(e);var o=e.document||e.doc||e,n;this.K=[],this.h=[],this.A=[],this.register=v(),this.key=(n=o.key||o.id)&&S(n,this.A)||"id",this.m=u(e.fastupdate),this.C=(n=o.store)&&n!==!0&&[],this.store=n&&v(),this.I=(n=o.tag)&&S(n,this.A),this.l=n&&v(),this.cache=(n=e.cache)&&new J(n),e.cache=!1,this.o=e.worker,this.async=!1,n=v();let i=o.index||o.field||o;x(i)&&(i=[i]);for(let s=0,r,l;s<i.length;s++)r=i[s],x(r)||(l=r,r=r.field),l=C(l)?Object.assign({},e,l):e,this.o&&(n[r]=new O(l),n[r].o||(this.o=!1)),this.o||(n[r]=new K(l,this.register)),this.K[s]=S(r,this.A),this.h[s]=r;if(this.C)for(e=o.store,x(e)&&(e=[e]),o=0;o<e.length;o++)this.C[o]=S(e[o],this.A);this.index=n}function S(e,o){let n=e.split(":"),i=0;for(let s=0;s<n.length;s++)e=n[s],0<=e.indexOf("[]")&&(e=e.substring(0,e.length-2))&&(o[i]=!0),e&&(n[i++]=e);return i<n.length&&(n.length=i),1<i?n:n[0]}function T(e,o){if(x(o))e=e[o];else for(let n=0;e&&n<o.length;n++)e=e[o[n]];return e}function U(e,o,n,i,s){if(e=e[s],i===n.length-1)o[s]=e;else if(e)if(e.constructor===Array)for(o=o[s]=Array(e.length),s=0;s<e.length;s++)U(e,o,n,i,s);else o=o[s]||(o[s]=v()),s=n[++i],U(e,o,n,i,s)}function V(e,o,n,i,s,r,l,h){if(e=e[l])if(i===o.length-1){if(e.constructor===Array){if(n[i]){for(o=0;o<e.length;o++)s.add(r,e[o],!0,!0);return}e=e.join(" ")}s.add(r,e,h,!0)}else if(e.constructor===Array)for(l=0;l<e.length;l++)V(e,o,n,i,s,r,l,h);else l=o[++i],V(e,o,n,i,s,r,l,h)}t=Q.prototype,t.add=function(e,o,n){if(C(e)&&(o=e,e=T(o,this.key)),o&&(e||e===0)){if(!n&&this.register[e])return this.update(e,o);for(let i=0,s,r;i<this.h.length;i++)r=this.h[i],s=this.K[i],x(s)&&(s=[s]),V(o,s,this.A,0,this.index[r],e,s[0],n);if(this.I){let i=T(o,this.I),s=v();x(i)&&(i=[i]);for(let r=0,l,h;r<i.length;r++)if(l=i[r],!s[l]&&(s[l]=1,h=this.l[l]||(this.l[l]=[]),!n||!h.includes(e))&&(h[h.length]=e,this.m)){let p=this.register[e]||(this.register[e]=[]);p[p.length]=h}}if(this.store&&(!n||!this.store[e])){let i;if(this.C){i=v();for(let s=0,r;s<this.C.length;s++)r=this.C[s],x(r)?i[r]=o[r]:U(o,i,r,0,r[0])}this.store[e]=i||o}}return this},t.append=function(e,o){return this.add(e,o,!0)},t.update=function(e,o){return this.remove(e).add(e,o)},t.remove=function(e){if(C(e)&&(e=T(e,this.key)),this.register[e]){for(var o=0;o<this.h.length&&(this.index[this.h[o]].remove(e,!this.o),!this.m);o++);if(this.I&&!this.m)for(let n in this.l){o=this.l[n];let i=o.indexOf(e);i!==-1&&(1<o.length?o.splice(i,1):delete this.l[n])}this.store&&delete this.store[e],delete this.register[e]}return this},t.search=function(e,o,n,i){n||(!o&&C(e)?(n=e,e=""):C(o)&&(n=o,o=0));let s=[],r=[],l,h,p,f,g,k,y=0;if(n)if(n.constructor===Array)p=n,n=null;else{if(e=n.query||e,p=(l=n.pluck)||n.index||n.field,f=n.tag,h=this.store&&n.enrich,g=n.bool==="and",o=n.limit||o||100,k=n.offset||0,f&&(x(f)&&(f=[f]),!e)){for(let m=0,w;m<f.length;m++)(w=ya.call(this,f[m],o,k,h))&&(s[s.length]=w,y++);return y?s:[]}x(p)&&(p=[p])}p||(p=this.h),g=g&&(1<p.length||f&&1<f.length);let B=!i&&(this.o||this.async)&&[];for(let m=0,w,A,R;m<p.length;m++){let _;if(A=p[m],x(A)||(_=A,A=_.field,e=_.query||e,o=_.limit||o),B)B[m]=this.index[A].searchAsync(e,o,_||n);else{if(i?w=i[m]:w=this.index[A].search(e,o,_||n),R=w&&w.length,f&&R){let q=[],z=0;g&&(q[0]=[w]);for(let X=0,ee,H;X<f.length;X++)ee=f[X],(R=(H=this.l[ee])&&H.length)&&(z++,q[q.length]=g?[H]:H);z&&(w=g?ma(q,o||100,k||0):na(w,q),R=w.length)}if(R)r[y]=A,s[y++]=w;else if(g)return[]}}if(B){let m=this;return new Promise(function(w){Promise.all(B).then(function(A){w(m.search(e,o,n,A))})})}if(!y)return[];if(l&&(!h||!this.store))return s[0];for(let m=0,w;m<r.length;m++){if(w=s[m],w.length&&h&&(w=za.call(this,w)),l)return w;s[m]={field:r[m],result:w}}return s};function ya(e,o,n,i){let s=this.l[e],r=s&&s.length-n;if(r&&0<r)return(r>o||n)&&(s=s.slice(n,n+o)),i&&(s=za.call(this,s)),{tag:e,result:s}}function za(e){let o=Array(e.length);for(let n=0,i;n<e.length;n++)i=e[n],o[n]={id:i,doc:this.store[i]};return o}t.contain=function(e){return!!this.register[e]},t.get=function(e){return this.store[e]},t.set=function(e,o){return this.store[e]=o,this},t.searchCache=oa,t.export=function(e,o,n,i,s){if(s||(s=0),i||(i=0),i<this.h.length){let r=this.h[i],l=this.index[r];o=this,setTimeout(function(){l.export(e,o,s?r:"",i,s++)||(i++,s=1,o.export(e,o,r,i,s))})}else{let r,l;switch(s){case 1:r="tag",l=this.l;break;case 2:r="store",l=this.store;break;default:return}ra(e,this,n,r,i,s,l)}},t.import=function(e,o){if(o)switch(x(o)&&(o=JSON.parse(o)),e){case"tag":this.l=o;break;case"reg":this.m=!1,this.register=o;for(let i=0,s;i<this.h.length;i++)s=this.index[this.h[i]],s.register=o,s.m=!1;break;case"store":this.store=o;break;default:e=e.split(".");let n=e[0];e=e[1],n&&e&&this.index[n].import(e,o)}},la(Q.prototype);var Ba={encode:Aa,F:!1,G:""};let Ca=[F("[\xE0\xE1\xE2\xE3\xE4\xE5]"),"a",F("[\xE8\xE9\xEA\xEB]"),"e",F("[\xEC\xED\xEE\xEF]"),"i",F("[\xF2\xF3\xF4\xF5\xF6\u0151]"),"o",F("[\xF9\xFA\xFB\xFC\u0171]"),"u",F("[\xFD\u0177\xFF]"),"y",F("\xF1"),"n",F("[\xE7c]"),"k",F("\xDF"),"s",F(" & ")," and "];function Aa(e){var o=e=""+e;return o.normalize&&(o=o.normalize("NFD").replace(ea,"")),ca.call(this,o.toLowerCase(),!e.normalize&&Ca)}var Ea={encode:Da,F:!1,G:"strict"};let Fa=/[^a-z0-9]+/,Ga={b:"p",v:"f",w:"f",z:"s",x:"s",\u00DF:"s",d:"t",n:"m",c:"k",g:"k",j:"k",q:"k",i:"e",y:"e",u:"o"};function Da(e){e=Aa.call(this,e).join(" ");let o=[];if(e){let n=e.split(Fa),i=n.length;for(let s=0,r,l=0;s<i;s++)if((e=n[s])&&(!this.filter||!this.filter[e])){r=e[0];let h=Ga[r]||r,p=h;for(let f=1;f<e.length;f++){r=e[f];let g=Ga[r]||r;g&&g!==p&&(h+=g,p=g)}o[l++]=h}}return o}var Ia={encode:Ha,F:!1,G:""};let Ja=[F("ae"),"a",F("oe"),"o",F("sh"),"s",F("th"),"t",F("ph"),"f",F("pf"),"f",F("(?![aeo])h(?![aeo])"),"",F("(?!^[aeo])h(?!^[aeo])"),""];function Ha(e,o){return e&&(e=Da.call(this,e).join(" "),2<e.length&&(e=E(e,Ja)),o||(1<e.length&&(e=ha(e)),e&&(e=e.split(" ")))),e||[]}var La={encode:Ka,F:!1,G:""};let Ma=F("(?!\\b)[aeo]");function Ka(e){return e&&(e=Ha.call(this,e,!0),1<e.length&&(e=e.replace(Ma,"")),1<e.length&&(e=ha(e)),e&&(e=e.split(" "))),e||[]}G["latin:default"]=ja,G["latin:simple"]=Ba,G["latin:balance"]=Ea,G["latin:advanced"]=Ia,G["latin:extra"]=La;let W=self,Y,Z={Index:K,Document:Q,Worker:O,registerCharset:function(e,o){G[e]=o},registerLanguage:function(e,o){ka[e]=o}};(Y=W.define)&&Y.amd?Y([],function(){return Z}):W.exports?W.exports=Z:W.FlexSearch=Z})(exports)});var ne=de(oe());var $=document.getElementById("search__text"),j=document.getElementById("search__suggestions");$!==null&&document.addEventListener("keydown",e=>{e.ctrlKey&&e.key==="/"?(e.preventDefault(),$.focus()):e.key==="Escape"&&($.blur(),j.classList.add("search__suggestions--hidden"))});document.addEventListener("click",e=>{j.contains(e.target)||j.classList.add("search__suggestions--hidden")});document.addEventListener("keydown",e=>{if(j.classList.contains("search__suggestions--hidden"))return;let n=[...j.querySelectorAll("a")];if(n.length===0)return;let i=n.indexOf(document.activeElement);if(e.key==="ArrowDown"){e.preventDefault();let s=i+1<n.length?i+1:i;n[s].focus()}else e.key==="ArrowUp"&&(e.preventDefault(),nextIndex=i>0?i-1:0,n[nextIndex].focus())});(function(){let e=new ne.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/blog/dsa/middle-of-the-linked-list-leetcode-876/",title:"Middle of the Linked List - Leetcode #876",description:`[leetcode](https://leetcode.com/problems/middle-of-the-linked-list/) Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.
problem links: leetcode, geekforgeeks.
Example 1:
Input: head = [1,2,3,4,5] Output: [3,4,5] Explanation: The middle node of the list is node 3.
Example 2:
Input: head = [1,2,3,4,5,6] Output: [4,5,6] Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.`,content:` [leetcode](https://leetcode.com/problems/middle-of-the-linked-list/) Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.
problem links: leetcode, geekforgeeks.
Example 1:
Input: head = [1,2,3,4,5] Output: [3,4,5] Explanation: The middle node of the list is node 3.
Example 2:
Input: head = [1,2,3,4,5,6] Output: [4,5,6] Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
Constraints:
The number of nodes in the list is in the range [1, 100]. 1 &lt;= Node.val &lt;= 100 Intuition# The first solution that everyone thought of first finds the length of the list by traversing it and then traversing it back again for half the length.
You can say this is the brute force approach if we just think we can come up with a better approach. We can use TotrtoiseaHare Method slow and fast pointers approach to find the mid of the list in just one go, in fact, we don&rsquo;t even have to traverse the list completely.
The slow pointer moves to the next pointer while the fast pointer jumps twice.
Approach# Declare and initialize slow and fast pointers with the head pointer. Now we have to iterate until we encounter any one condition where either fast is null or fast-&gt;next is null. In every iteration move the slow pointer to the next and the fast pointer to the next&rsquo;s next. When the loop got terminated, the slow pointer will be representing the middle of the linked list. Example:
Consider the linked list
[1] \u2192 [2] \u2192 [3] \u2192 [4] \u2192 [5] First iteration: Fast pointer moves from [1] to [3]. The slow pointer moves from [1] to [2].
Slow Pointer (S) Fast Pointer (F)
[2] [3]
Second iteration: Fast pointer moves from [3] to [5]. The slow pointer moves from [2] to [3].
Slow Pointer (S) Fast Pointer (F)
[3] [5]
Termination: The fast pointer reaches the end of the linked list (in this case [5]). At this point, the slow pointer is pointing to the middle element, which is [3].
[1] \u2192 [2] \u2192 [3] \u2192 [4] \u2192 [5]
Slow Pointer (S) Fast Pointer (F)
[3] [5] (end of linked list)
So, by using the slow and fast pointers, we can easily find the middle element of the linked list in linear time and with a constant amount of extra space.
Solution# C++# class Solution { public: ListNode* middleNode(ListNode* head) { ListNode* slow = head, *fast = head; while(fast != nullptr &amp;&amp; fast-&gt;next != nullptr){ slow = slow-&gt;next; fast = fast-&gt;next-&gt;next; } return slow; } }; Java# class Solution { public ListNode middleNode(ListNode head) { ListNode slow = head, fast = head; while (fast != null &amp;&amp; fast.next != null) { slow = slow.next; fast = fast.next.next; } return slow; } } Time Complexity# if n is the number of nodes in the linked list. Then the worst-case time complexity will be O(n). As the slow and fast pointers iterated over the linked list once., the max number of iterations done is n/2
Space Complexity# The space complexity of this solution is O(1) or constant space complexity. As we only require slow and fast pointers which are constant variables, regardless of the linked list size.
Thank you for reading the post, I hope this would have helped you to understand the question better and the solution helped you to get a clear understanding of the approach used.
Feel free to drop any comments, I would love to solve your queries and improve my solution.
`}).add({id:1,href:"/blog/dsa/sort-characters-by-frequency-leetcode-451/",title:"Sort Characters By Frequency - Leetcode #451",description:`Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.
problem links: leetcode, geekforgeeks.
Example 1:
Input: s = &#34;tree&#34; Output: &#34;eert&#34; Explanation: &rsquo;e&rsquo; appears twice while &lsquo;r&rsquo; and &rsquo;t&rsquo; both appear once. So &rsquo;e&rsquo; must appear before both &lsquo;r&rsquo; and &rsquo;t&rsquo;.`,content:`Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.
problem links: leetcode, geekforgeeks.
Example 1:
Input: s = &#34;tree&#34; Output: &#34;eert&#34; Explanation: &rsquo;e&rsquo; appears twice while &lsquo;r&rsquo; and &rsquo;t&rsquo; both appear once. So &rsquo;e&rsquo; must appear before both &lsquo;r&rsquo; and &rsquo;t&rsquo;. Therefore &ldquo;eetr&rdquo; is also a valid answer.
Example 2:
Input: s = &#34;cccaaa&#34; Output: &#34;aaaccc&#34; Explanation: Both &lsquo;c&rsquo; and &lsquo;a&rsquo; appear three times, so both &ldquo;cccaaa&rdquo; and &ldquo;aaaccc&rdquo; are valid answers. Note that &ldquo;cacaca&rdquo; is incorrect, as the same characters must be together.
Example 3:
Input: s = &#34;Aabb&#34; Output: &#34;bbAa&#34; Explanation: &ldquo;bbaA&rdquo; is also a valid answer, but &ldquo;Aabb&rdquo; is incorrect. Note that &lsquo;A&rsquo; and &lsquo;a&rsquo; are treated as two different characters.
Constraints:
1 &lt;= s.length &lt;= 5 * 105 s consists of uppercase and lowercase English letters and digits. Intuition# The first thing that comes to mind after reading the problem description is, it will need a hashmap or a vector used as a map to solve the problem.
After seeing that you realize that only hashmap will not be sufficient to solve the problem, you need another data structure to sort the frequencies.
There are two options that you can go with:
Using a vector&lt;pair&lt;char, int&raquo; and making a custom sorting function to sort the character according to their frequency. The second option is using a priority queue to store the char with their frequencies, So we when pop elements one by one we will have elements with the highest frequency at the top always. You can go with any of the approaches discussed, for now, we don&rsquo;t have any constraints so I go with the second one.
After you have chosen the approach, you need to build the string with a character with the highest frequency at first and the lowest at last. This could be done very easily.
Approach# Declare a hashmap to map char with frequencies and declare and priority. Iterate over the string and update the frequency of the characters on occurrence. Iterate over the map now, and push the character with respective frequency in the queue. It is important you push it in &lt;int, char&gt; format. A priority queue will use the first parameter to sort. Now get the top element in the priority queue and use its frequency and character, push the character in the ans string until the frequency becomes zero. Solution# c++# class Solution { public: string frequencySort(string s) { // Declaration of map and priority queue unordered_map&lt;char, int&gt; map; priority_queue&lt;pair&lt;int, char&gt;&gt; pq; // Mapping the char with the frequency for(auto ch: s) map[ch]++; // Pushing the char with frequencies in the priority queue for(auto it: map){ pq.push({it.second, it.first}); } string ans = &#34;&#34;; // Generating the anser string while(!pq.empty()){ auto [freq, ch] = pq.top(); pq.pop(); while(freq--) ans.push_back(ch); } return ans; } }; Java
class Solution { public String frequencySort(String s) { Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); PriorityQueue&lt;Map.Entry&lt;Character, Integer&gt;&gt; pq = new PriorityQueue&lt;&gt;((a, b) -&gt; b.getValue() - a.getValue()); // Mapping the char with the frequency for (char c : s.toCharArray()) { map.put(c, map.getOrDefault(c, 0) + 1); } // Pushing the char with frequencies in the priority queue pq.addAll(map.entrySet()); StringBuilder ans = new StringBuilder(); // Generating the anser string while (!pq.isEmpty()) { Map.Entry&lt;Character, Integer&gt; entry = pq.poll(); int freq = entry.getValue(); char ch = entry.getKey(); while (freq-- &gt; 0) { ans.append(ch); } } return ans.toString(); } } Time Complexity# The time complexity of this solution is O(nlogn), where n is the length of the string s. This is because the priority queue requires 0(nlogn) time in its worst-case scenario where it will compare an element with each element.
Space Complexity# The space complexity of this solution is O(n), where n is the length of the string s. This is because the solution uses a hash map map and a priority queue pq to store and sort the frequency of each character, respectively.
Thank you for reading the post, I hope this would have helped you to understand the question better and the solution helped you to get a clear understanding of the approach used.
Feel free to drop any comments, I would have to solve your queries and improve my solution.
`}).add({id:2,href:"/blog/dsa/isomorphic-strings-leetocde-205/",title:"Isomorphic Strings - Leetcode #205",description:`problem links: leetcode, geekforgeeks.
Problem Statement# Given two strings s and t, determine if they are isomorphic.
Two strings s and t are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
Example 1:`,content:`problem links: leetcode, geekforgeeks.
Problem Statement# Given two strings s and t, determine if they are isomorphic.
Two strings s and t are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
Example 1:
Input: s = &#34;egg&#34;, t = &#34;add&#34; Output: true Example 2:
Input: s = &#34;foo&#34;, t = &#34;bar&#34; Output: false Example 3:
Input: s = &#34;paper&#34;, t = &#34;title&#34; Output: true Constraints:
1 &lt;= s.length &lt;= 5 * 104 t.length == s.length s and t consist of any valid ASCII character. Intuition# The question asks us to find whether the strings are isomorphic or not, that is another way to say if a one-to-one mapping is possible in strings s and t.
for example,
String 1: &ldquo;ABC&rdquo; String 2: &ldquo;XYZ&rdquo; In this example, the character &lsquo;A&rsquo; in String 1 corresponds to the character &lsquo;X&rsquo; in String 2, the character &lsquo;B&rsquo; corresponds to &lsquo;Y&rsquo;, and so on.
Let&rsquo;s see another example,
String 1: &ldquo;abcdefg&rdquo; String 2: &ldquo;1122333&rdquo; In this example, the character &lsquo;a&rsquo; and &lsquo;b&rsquo; in String 1 corresponds to the character &lsquo;1&rsquo; in String 2, the character &lsquo;c&rsquo; and &rsquo;d&rsquo; corresponds to &lsquo;2&rsquo;, and so on.
In this case, also it is not one-to-one mapping as multiple characters in String 1 correspond to a single character in String 2
So, we can use a hashmap to map the characters of one string to another and check if a one-to-one mapping is possible or not.
Approach# Declare a map data structure and store the size of the string in a variable n. Initialize a loop from 0 to n-1, where i is the loop control variable. check if the s[i] is mapped to some character or not, if it is not mapped then assign it to t[i]. if it is already mapped then check if the one-to-one relationship is maintained, if not return false. Solution# c++# class Solution { public: bool checkIsomorphic(string s, string t){ unordered_map&lt;char, int&gt; map; int n = s.size(); for(int i=0;i&lt;n;i++){ char u = s[i]; char v = t[i]; if(map.find(u) == map.end()){ map[u] = v; }else{ if(map[u] == v) continue; else return false; } } return true; } bool isIsomorphic(string s, string t) { return checkIsomorphic(s, t) &amp;&amp; checkIsomorphic(t, s); } }; Java# class Solution { public boolean checkIsomorphic(String s, String t) { Map&lt;Character, Character&gt; map = new HashMap&lt;&gt;(); int n = s.length(); for (int i = 0; i &lt; n; i++) { char u = s.charAt(i); char v = t.charAt(i); if (!map.containsKey(u)) { map.put(u, v); } else { if (map.get(u) == v) { continue; } else { return false; } } } return true; } public boolean isIsomorphic(String s, String t) { return checkIsomorphic(s, t) &amp;&amp; checkIsomorphic(t, s); } } Time Complexity# if n is the size of the string. Then the worst-case time complexity will be O(n).
Space Complexity# The space complexity of the isIsomorphic method is O(n), where n is the length of the input strings s and t. Because we have used a hashmap to store the mapping of the character, in the worst case it will take O(n) as the map will store n key-value pairs.
Thank you for reading the post, I hope this would have helped you to understand the question better and the solution helped you to get a clear understanding of the approach used.
Feel free to drop any comments, I would have to solve your queries and improve my solution.
`}).add({id:3,href:"/blog/dsa/largest-odd-number-in-string-leetcode-1903/",title:"Largest Odd Number in String - Leetcode #1903",description:`problem links: leetcode, geekforgeeks.
Problem Statement# You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string &quot;&quot; if no odd integer exists.
A substring is a contiguous sequence of characters within a string.
Example 1:
Input: num = &#34;52&#34; Output: &#34;5&#34; Explanation: The only non-empty substrings are &ldquo;5&rdquo;, &ldquo;2&rdquo;, and &ldquo;52&rdquo;. &ldquo;5&rdquo; is the only odd number.`,content:`problem links: leetcode, geekforgeeks.
Problem Statement# You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string &quot;&quot; if no odd integer exists.
A substring is a contiguous sequence of characters within a string.
Example 1:
Input: num = &#34;52&#34; Output: &#34;5&#34; Explanation: The only non-empty substrings are &ldquo;5&rdquo;, &ldquo;2&rdquo;, and &ldquo;52&rdquo;. &ldquo;5&rdquo; is the only odd number.
Example 2:
Input: num = &#34;4206&#34; Output: &#34;&#34; Explanation: There are no odd numbers in &ldquo;4206&rdquo;.
Example 3:
Input: num = &#34;35427&#34; Output: &#34;35427&#34; Explanation: &ldquo;35427&rdquo; is already an odd number.
Constraints:
1 &lt;= num.length &lt;= 105 num only consists of digits and does not contain any leading zeros. Intuition# We are given a string and we need to find the longest odd number possible from it.
To check if the no is odd or not we only need to see the last digit of the no, if it&rsquo;s even the number is even and it is odd then the number is odd. We will use this concept to find the answer.
The idea is to integrate the string from n-1 to 0 and check if the character at i is odd or even, if it is odd then we got out the answer.
Approach# Find the length of the string. We start a loop from n-1 to 0, i is the loop control variable, and this will traverse the string from right to left. For each index of i we will check if the number is odd or not. If we didn&rsquo;t find any odd number until i becomes less than 0, we return an empty string. Example# num = &#34;1234&#34; n = 4; initialize i = n-1 when i = 3, num[i] = 4. num[i]%2 == 1 | false when i = 2, num[i] = 3. num[i]%2 == 1 | true, so we return substring from (0,i+1) i.e &#34;123&#34; Solution# C++# class Solution { public: string largestOddNumber(string num) { int n = num.size(); for(int i=n-1;i&gt;=0;i--){ if((num[i] - &#39;0&#39;)%2 == 1) return num.substr(0,i+1); } return &#34;&#34;; } }; Java# class Solution { public String largestOddNumber(String num) { int n = num.length(); for(int i=n-1;i&gt;=0;i--){ if((num.charAt(i) - &#39;0&#39;)%2 == 1) return num.substring(0,i+1); } return &#34;&#34;; } } Time Complexity# if n is the size of the string. Then the worst-case time complexity will be O(n).
Space Complexity# The space complexity of this solution is O(1) or constant space complexity.
Thank you for reading the post, I hope this would have helped you to understand the question better and the solution helped you to get a clear understanding of the approach used.
Feel free to drop any comments, I would have to solve your queries and improve my solution.
`}).add({id:4,href:"/blog/dsa/longest-common-prefix/",title:"Longest Common Prefix - Leetcode #14",description:`Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string &quot;&quot;.
Problem explanations:
The questions ask us to find the longest common prefix, prefix is a word that can be added at the beginning of the string to form a new word. We have given a vector of strings from which we have to find the prefix and we have to return a string of the longest common prefix.`,content:`Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string &quot;&quot;.
Problem explanations:
The questions ask us to find the longest common prefix, prefix is a word that can be added at the beginning of the string to form a new word. We have given a vector of strings from which we have to find the prefix and we have to return a string of the longest common prefix.
problem links: leetcode, geekforgeeks.
Example 1:
Input: strs = [&#34;flower&#34;,&#34;flow&#34;,&#34;flight&#34;] Output: &#34;fl&#34; Example 2:
Input: strs = [&#34;dog&#34;,&#34;racecar&#34;,&#34;car&#34;] Output: &#34;&#34; Explanation: There is no common prefix among the input strings.
Solution# C++ solution class Solution { public: string longestCommonPrefix(vector&lt;string&gt;&amp; strs) { string ans = &#34;&#34;; int n = strs.size(); int j=0; while(j&lt;strs[0].size()){ for(int i=1;i&lt;n;i++){ if(strs[0][j] != strs[i][j]) return ans; } ans = ans + strs[0][j]; j++; } return ans; } }; Java solution class Solution { public String longestCommonPrefix(String[] strs) { String ans = &#34;&#34;; int n = strs.length; int j = 0; while (j &lt; strs[0].length()) { for (int i = 1; i &lt; n; i++) { if (strs[0].charAt(j) != strs[i].charAt(j)) { return ans; } } ans += strs[0].charAt(j); j++; } return ans; } } Explanation:
The solution uses a simple approach that iterates over the vector of strings.
A string is declared ans to store the common prefix and n is used to store the size of the vector. ****
we want the outer loop to run till the size of the first string in the vector. The inner for loop will compare the character of the first string&rsquo;s char at index j with the strings in the vector at index i and char at index j.
If the characters don&rsquo;t match then we return the ans, this is the longest common prefix that is present. if the loop end with encountering the condition we add that character in the ans and increment j by
Time Complexity# if m is the size of the first string and n is the size of the list of strings. Then the worst-case time complexity will be O(m x n).
Space Complexity# The space complexity of this solution is O(1) or constant space complexity.
The solution uses a string ans to store the ans and variable n to store the size of the list. No additional data structures are used for the solution.
Thank you for reading the post, I hope this would have helped you to understand the question better and the solution helped you to get a clear understanding of the approach used.
Feel free to drop any comments, I would have to solve your queries and improve my solution.
`}).add({id:5,href:"/blog/baas/appwrite-firebase-open-source-alternative/",title:"Appwrite Firebase open source alternative is here",description:`Appwrite is a platform for building and deploying web and mobile applications more quickly and efficiently. Appwrite is an open-source Firebase alternative that provides services like authentication, authorization, storage, and database (No-SQL). Appwrite is designed to be flexible and scalable, you need to host it yourself, unlike Supabase which provides a managed host option.
Appwrite APIs# REST# Appwrite exposes a REST API that developers can use to access various functions and services on the Appwrite server.`,content:`Appwrite is a platform for building and deploying web and mobile applications more quickly and efficiently. Appwrite is an open-source Firebase alternative that provides services like authentication, authorization, storage, and database (No-SQL). Appwrite is designed to be flexible and scalable, you need to host it yourself, unlike Supabase which provides a managed host option.
Appwrite APIs# REST# Appwrite exposes a REST API that developers can use to access various functions and services on the Appwrite server. This API allows developers to perform tasks such as managing users, storing and retrieving data, and sending emails, using standard HTTP methods such as GET, POST, PUT, and DELETE.
The API can be used to develop a wide range of applications, the APIs are easy to use and highly flexible and they are backed by detailed documentation with examples that help developers get started and find answers when stuck.
GraphQL# Appwrite supports GraphQL as an alternative to its REST API for accessing server-side functionality. Facebook developed and later open-sourced GraphQl.
Appwrite recently announced its GraphQL API. Using GraphQL developers can query and update the data on the Appwrite server, GraphQL lets the developers specify the exact data they need and the server will return only that data, unlike REST.
To use GraphQL in your projects, you can write the queries and mutation using the GraphQL syntax, On POST request Appwrite server will execute the query and return the response in JSON format. Developers can use the Appwrite GraphQL API with any GraphQL client or library, or interact with it directly using HTTP requests and the GraphQL syntax.
Realtime# Appwrite provides a real-time API that allows developers to build applications and services that can receive and process updates and events in real time. This can be useful for a wide range of scenarios, such as chat and messaging systems, collaborative applications, and other types of interactive experiences.
The real-time helps you to build apps that are responsive and can provide information from all the services of the Appwrite that you are using.
Appwrite services# 1. Database# For database, Appwrite provides you with a No-SQL database. The database is similar to Firebase Firestore which stores that in collection and documentation if you are coming from firebase then you will not have a problem using the database.
Appwrite provides a database API that allows developers to create and manage databases and collections, and to perform CRUD operations on data stored in the database.
Appwrite allows you to create multiple databases, and organize your data into documentation and collection. To fetch and upload the data you can use the REST API and listen to real-time changes you can subscribe to live changes in your documents and collections.
To create the database you can either use Appwrite CLI or the Appwrite Server SDK.
2. Accounts# Accounts provide features such as user registration, authentication, and authorization, as well as tools for managing user roles and permissions.
Appwrite supports email &amp; password, passwordless login called magic link, phone auth, and supports all the major Social Logins (OAuth) providers. The account service provides APIs for handling authentication including single sign-on (SSO) and multi-factor authentication (MFA).
This also provides APIs for managing user roles and permissions, allowing developers to control which users can access specific resources or features in the application. For user management, It provides APIs for managing user profiles, including the ability to update user information and set account preferences.
Overall, the Appwrite accounts service is designed to make it easier for developers to build applications that require user authentication and authorization, and to manage user accounts securely and efficiently.
3. Storage# Appwrite provides a storage API that allows developers to store and retrieve files and other data, such as images and documents.
Storage manages files using buckets. The storage buckets are similar to the collection in the database but buckets give you more control and power to decide, what type of files to allow, what file size you want to allow, and want to encrypt the file or not. It also gives you the option to scan files with an anti-virus.
Using the preview endpoints you can generate a preview of the file, you can modify the preview so that it can suit your needs. You can modify it in terms of dimensions, file size, and style.
4. Functions# Appwrite functions are used to perform a variety of tasks in a server-side environment, such as creating and managing users, storing and retrieving data, and sending emails. They are typically executed in response to events triggered by client-side applications and can be used to build APIs, microservices, and other back-end services. Appwrite functions are written in JavaScript and are executed on the Appwrite server, which provides a range of built-in services and libraries that can be used to access databases, file storage, and other resources.
In simple words the functions allow you to create custom responses whenever for an event. The functions can be triggered by any available Appwrite service or you can schedule it.
Conclusion# Appwrite is a BAAS that provides the core services that a developer needs to build the apps but it still lacks services like analytics, crashlytics, and more that Firebase has.
It provides you to connect multiple apps to a single Appwrite instance, you can use the Appwrite SDK or API to access the various functions and services provided by the Appwrite server. For example, you can use the Appwrite SDK to authenticate users, store and retrieve data, send emails, and more, from within your apps.
There are no options for managed hosting so you are left with the option of hasting Appwrite yourself. That can easily be done by using a one-click install on Digital Ocean.
I hope this article will help you know about Appwrite and its services.
If I got something wrong, Inform me on my social media accounts and feel free to contact me and help me to correct it, I would love to improve and rectify my mistake.
\u2764\uFE0F\u2764\uFE0F Thanks for reading this article \u2764\uFE0F\u2764\uFE0F
`}).add({id:6,href:"/blog/baas/supabase/",title:"An Introduction to Supabase: The Open-Source Alternative to Firebase",description:`What is Supabase?# Supabase is an open-source platform that provides Backend-as-a-Service (BaaS). Supabase provides SDK for platforms like web, and mobile (Android &amp; IOS) that helps you speed up the development process and manage all the services you will need for the development.
Supabase is developed to help developers to set up their backends in minutes, living up to their slogan &ldquo;Build in a weekend, scale to millions&rdquo;.
Supabase vs Firebase# Supabase is marketed as &ldquo;Supabase is an open-source Firebase alternative&rdquo; let&rsquo;s see how true it is.`,content:`What is Supabase?# Supabase is an open-source platform that provides Backend-as-a-Service (BaaS). Supabase provides SDK for platforms like web, and mobile (Android &amp; IOS) that helps you speed up the development process and manage all the services you will need for the development.
Supabase is developed to help developers to set up their backends in minutes, living up to their slogan &ldquo;Build in a weekend, scale to millions&rdquo;.
Supabase vs Firebase# Supabase is marketed as &ldquo;Supabase is an open-source Firebase alternative&rdquo; let&rsquo;s see how true it is.
Keep in mind Firebase is now mature enough while Supabase is still in its infancy. Firebase has got years of updates and support from the biggest tech giant in the industry Google. While supabase was launched in 2020 has a long way to go.
The one big advantage that Supabase has is it only uses open-source technologies, which means you can run Supabase with docker and self-host it on AWS, and Digital Ocean which means you are free from vendor lock-in, unlike Firebase that uses its priority technologies like Firestore that locks you to with the platform.
There is much more to compare between Supabase and Firebase, let&rsquo;s save this topic for another post and focus on the Supabse here.
Supabase Features# 1. Database# Supabase uses Postgres SQL which is an open-source relational. Supabase makes it easier to use SQL databases, Supabase database scales up with no extra effort it manages all the things on its end and it comes with a dashboard and SDK that makes it much easier to use it.
On creating a new project it creates a table with it, Using the database dashboard you can start adding tables and columns to it. Supabase will update the schema and will handle migrations for us in the background. The dashboard helps us to visualize the data and makes it easier to manage it.
The API tab of Supabase provides you with an easy way to integrate the database. The documentation there is specifically generated for your database, the API documentation is auto-generated so if you change something in the database the documentation will update too.
Instead of writing raw SQL code in your project, you can use Supabase SDK which allows you to access your data in a DSL, you can use simply write the query if you want to access the data instead of writing a full join.
Supabase also provides you with an SQL editor where you can write queries and run them, it also provides you with full-text search, unlike Firestore, which also provides you Triggers and Extensions.
2. Auth# Authentication is one of the important services that you need in your app to manage user and their data. Supabase provides an authentication service that is very similar to firebase.
Supabase supports email &amp; password, passwordless login called magic link, phone auth, and supports all the major Social Logins (OAuth) providers.
It provides you with a dashboard where you can see users and has a separate section for Email Template where you can customize the email sent to the users. Supabase provides Row Level Security and stores the data in a table, that you can extend with another table using a foreign key.
let { user, error } = await supabse.auth.signUp({ email: &#39;geekaid10@gmail.com&#39; password: &#39;********&#39; }) I like how Supbase Auth returns the error as an object, unlike firebase where you need to wrap the signUp in a try-catch block.
3. Storage# The storage bucket that Supabase provides is very similar to AWS S3 and Firebase Storage. All these are similar but use different naming conventions.
To use Supabase storage you have to create a bucket first, you can choose to keep the bucket public or private according to your use case. In the bucket, you can upload files and create folders for organizing files.
To upload files you can either use the Supbase storage dashboard or from your app depending on your use case. The dashboard provides you with an interface that helps you to navigate and use it, this makes interacting and organizing the storage easy.
4. Documentation# Good documentation is very important for any platform and Supabase is no exception. Documentation helps developers to understand how to use the platform and helps developers troubleshoot
The Supabase documentation includes a getting started guide that provides an overview of the platform and step-by-step instructions on how to set up a Supabase project and start building and deploying applications. It also includes guides and references on topics such as the Supabase Database, Supabase Authentication, and more.
Supabase also provides resources other than documentation that helps developers get started with the platform, which includes a developer community forum, slack channel, and GitHub repository to help developers.
5. Edge Functions# Supabase has recently launched Edge Functions which allows you to write custom server-side logic in Node.js that can be triggered by events. The event can be anything like a CRUD operation in the database or a resource request.
The Edge Functions can be useful for integrating the platform with third-party APIs or performing tasks that would be very difficult to handle on the client side.
To use Edge Functions you simply need to create a Node.js project and using the Supabase CLI you can deploy your Edge Functions to the platform, where they will trigger for the events you set.
Conclusion# Subbase is not a one-to-one mapping of firebase services, it provides you with the services that your developers require to build an application. It still missing services like crashlytics, monitoring, and notification. Supabase has the potential to become a Firebase alternative one day.
Supabase database is a very good service if you need a SQL database in your application that comes with a good SDK. Supabase Authentication covers all the major authentication that anyone can need in their database.
The supabase also gives you the option to self-host the platform but people use BAAS as they do not want to handle the hosting of their backend.
I hope this article will help you to learn about Supbase and the services it provides.
If I got something wrong, Inform me on my social media accounts and feel free to contact me and help me to correct it, I would love to improve and rectify my mistake.
\u2764\uFE0F\u2764\uFE0F Thanks for reading this article \u2764\uFE0F\u2764\uFE0F
`}).add({id:7,href:"/blog/flutter/flutter-navigation-named-routes-ongenerateroute/",title:"Flutter Navigation \u2013 Named Routes, onGenerateRoute",description:`Modern mobile applications can contain many screens or routes and navigate between the pages sets the workflow of the application. Because of navigation a user can navigate from their home screen to another. Handling the navigation is known as routing.
Flutter provides a routing class using which we can set up navigation in our app. But using the navigation directly into the code is not advisable you need to abstract the navigation from the UI.`,content:`Modern mobile applications can contain many screens or routes and navigate between the pages sets the workflow of the application. Because of navigation a user can navigate from their home screen to another. Handling the navigation is known as routing.
Flutter provides a routing class using which we can set up navigation in our app. But using the navigation directly into the code is not advisable you need to abstract the navigation from the UI. Later in this article, we will see how to achieve it.
Let&rsquo;s jump to the code and start exploring navigation in a flutter.
What we will cover# Initial Setup Navigator Navigating to a route Returning to the previous route Using Named Routes with onRouteGenrate Conclusion Initial Setup# To demonstrate how navigation works, First, we need some screens.
So, I have created a project that contains two widgets named FirstScreen and SecondScreen, these widgets will work as screens. For the sake of simplicity, both widgets are created in the main.lib itself.
The second screen requires a string parameter that you have to pass while routing to it.
import &#39;package:flutter/material.dart&#39;; void main() { runApp(const MyApp()); } class MyApp extends StatelessWidget { const MyApp({super.key}); @override Widget build(BuildContext context) { return MaterialApp( title: &#39;Flutter Demo&#39;, theme: ThemeData( primarySwatch: Colors.blue, ), home: const FirstScreen(), ); } } class FirstScreen extends StatelessWidget { const FirstScreen({super.key}); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text(&#34;First Screen&#34;), centerTitle: true, ), body: Center( child: ElevatedButton( onPressed: () { // Contains the code that helps us // navigate to the second route. }, child: const Text( &#34;Second Screen&#34;, ), ), ), ); } } class SecondScreen extends StatelessWidget { final String args; const SecondScreen({ super.key, required this.args, }); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text(&#34;Second Screen&#34;), centerTitle: true, ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Text( args, style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 30), ), ElevatedButton( onPressed: () { // Contains the code that helps us // navigate to first route. }, child: const Text( &#34;Second Screen&#34;, ), ), ], ), ), ); } } This is how the main.lib looks like we will add code in the onPressed arguments of the buttons in both the screen that will handle the navigation.
Navigator# As the name suggests navigator is a class in Flutter that help us to navigate between routes. The navigator uses a stack data structure to keep track of the routes. Based on user interaction with the app, the routes are pushed or popped from the stack.
Navigating to a route# We have declared our screens and we just need the logic that will navigate us from one route to another.
To navigate to a new route we will use Navigator.of(context).push(), this method will push the new route in the stack hence displaying the pushed screen.
onPressed: () { // Add this in onPressed argument of ElevatedButton in FirstScreen Navigator.of(context).push( MaterialPageRoute( builder: (context) =&gt; const SecondScreen(args: &#34;Geek Aid&#34;))); }, we pushed the SecondScreen in the stack with a string argument &ldquo;Geek Aid&rdquo;.
Returning to the previous route# Now we have navigated to our desired route, but what if you need to go back to the previous route?
For this, we can use the Navigator.of(context).pop() method, which will remove the top route from the navigator stack, resulting in going back to the previous screen.
onPressed: () { // Add this in onPressed argument of ElevatedButton in SecondScreen Navigator.of(context).pop(); }, Using Named Routes with onRouteGenrate# The above-demonstrated way will work for small apps and your mini-side projects, but as your project size grows it will lead to many issues.
Directly using the navigator to navigate between the routes in a big will lead to code duplication and become hard to maintain, to resolve the problem we can follow the principle of separation of concern.
To abstract our navigation logic we will create a class name RouteGerator.
import &#39;package:flutter/material.dart&#39;; import &#39;package:flutter_routes/main.dart&#39;; class RouteGenerator { static Route&lt;dynamic&gt; generateRoute(RouteSettings settings) { // Getting arguments passed in while calling Navigator.pushNamed final args = settings.arguments; switch (settings.name) { case &#39;/&#39;: return MaterialPageRoute(builder: (_) =&gt; const FirstScreen()); case &#39;/second&#39;: if (args is String) { return MaterialPageRoute(builder: (_) =&gt; SecondScreen(args: args)); } // If args is not of the correct type, return an error page. // You can also handle this by throwing an error. return _errorRoute(); // If there is no such named route in the switch statement //e.g. /geekaid default: return _errorRoute(); } } // error screen static Route&lt;dynamic&gt; _errorRoute() { return MaterialPageRoute(builder: (_) { return Scaffold( appBar: AppBar( title: const Text(&#39;Error&#39;), centerTitle: true, ), body: const Center( child: Text( &#39;Error ! Something went wrong&#39;, style: TextStyle(color: Colors.red, fontSize: 18.0), ), ), ); }); } } This is what the RouteGenerator class looks like, we use a switch here to push the appropriate screen to the stack. Using the RouteGenerator class we have moved our navigation logic to one place.
Now it&rsquo;s time to update our MaterialApp to start using this class and replace all the existing navigation with a navigator to push named routes.
class MyApp extends StatelessWidget { const MyApp({super.key}); @override Widget build(BuildContext context) { return MaterialApp( ... home: const FirstScreen(), // remove this initialRoute: &#39;/&#39;, // Add this onGenerateRoute: RouteGenerator.generateRoute, ); } } class FirstScreen extends StatelessWidget { const FirstScreen({super.key}); @override Widget build(BuildContext context) { return Scaffold( ... body: Center( child: ElevatedButton( onPressed: () { //Replace existing Naigator.push() with Navigator.pushNamed() Navigator.of(context).pushNamed(&#39;second&#39; ,arguments: &#39;Geek Aid&#39;); }, child: const Text( &#34;Second Screen&#34;, ), ), ), ); } } Conclusion# You have learned how to navigate between routes in your flutter application. You have learned to encapsulate all of your routing logic and resulting in no code duplication issues.
You have learned how to manage navigation in larger apps using the onGenerateRoutes. See this is the best approach that Flutter provides to handle navigation. Don&rsquo;t think it&rsquo;s too complicated give it a try and things will start making sense to you.
I hope this article will help you to learn how to handle routes in your Flutter app.
If I got something wrong, Inform me on my social media accounts and feel free to contact me and help me to correct it, I would love to improve and rectify my mistake.
\u2764\uFE0F\u2764\uFE0F Thanks for reading this article \u2764\uFE0F\u2764\uFE0F
`}).add({id:8,href:"/blog/flutter/choosing-the-right-database-for-your-flutter-application/",title:"Choosing the right database for your Flutter application",description:`Data is an essential aspect of your application. Choosing the right database for your application according to your requirements is very important. The success of the application relies on how millions of queries handle efficiently and flawlessly in real time by the database.
If you are looking for the right database for your app then you are reading the right articles. Flutter which is a UI software development kit created by Google has a wide variety of databases available to choose from.`,content:`Data is an essential aspect of your application. Choosing the right database for your application according to your requirements is very important. The success of the application relies on how millions of queries handle efficiently and flawlessly in real time by the database.
If you are looking for the right database for your app then you are reading the right articles. Flutter which is a UI software development kit created by Google has a wide variety of databases available to choose from. The selection of a database depends on your requirement and its ease of use.
What we will cover# What is a database? Relational Database Non-Relational Database What is an ORM? Relational database option for Flutter sqflite Drift Floor Non-Relational database option for flutter Firebase Hive What is a database?# A database is an organized collection of data that can be stored and accessed the data efficiently and easily. CRUD operations create, read, update and delete operations can be performed on data, the information is safely stored and available until it is deleted.
Modern apps demand real-time data delivery every time it is requested by the end users. It is also important to maintain the integrity of data while meeting the real-time delivery of data on user requests.
In general, databases are of two types, Relational and Non-Relational databases.
Relational Database# A relational database is a type of database where data is stored in one or more tables (or &ldquo;relations&rdquo;) of columns and rows, it is easy to visualize and understand how tables are related to each other.
In a relational database, each table has a column known as the primary key that can be used to identify each row uniquely, and these keys are used to establish relations between different tables.
The popular relational database is SQLite and MySQL.
Non-Relational Database# Non-relational databases (often called NoSQL databases) are different from traditional relational databases, non-relational database stores data in non-tabular form, unlike relational database.
One way non-relational database store data is in form of documents. Where the documents are similar to JSON (JavaScript Object Notation) objects. Each document contains a list of pairs of fields and values. The values can be of type strings, numbers, booleans, arrays, or objects.
The popular Non-relational database is firebase firestore and MongoDB.
What is an ORM?# Object Relational Mapping is a technique that is used to create a bridge between the database and object-oriented programing language.
Put another way, ORM gives us the power to query and manipulate (CRUD operations ) data using an object-oriented programing language.
Using ORM we communicate with the database using programming languages.
Relational database option for flutter# sqflite# For Flutter SQLite is used to implement SQflite. It gives you complete control over your app database, queries, and relationships in your hands.
Pros:# You have total control over the database. Automatic version management during the opening. database operations are performed on a background thread in Android and IOS. have support for transactions and batches. Cons:# It does not support web applications. writing all the queries on you can be time-consuming and error-prone. It is hard to migrate the database. When to use sqflite:# sqflite is a good database that gives you total control, it is best suited if you want to be comfortable writing queries by yourself.
Drift# moor which is known as Drift know is a reactive persistence library built on top of SQLite for Flutter and Dart.
A fun fact is a moor is the reverse of the room, which is the former name of Drift.
Drift is a wrapper/abstraction layer of SQLite database that generates most of the boilerplate and provides you the same functionality and tools that you will require to write a relational database.
Pros:# Drift lets you write queries in both SQL and Dart, providing fluent APIs for both languages. Filter your queries using joins on multiple tables and use complex SQL features like WITH and WINDOW clauses. modulate as drift has built-in support for doa&rsquo;s. Typesafe code is generated based on your table and queries. Drift shows lint if the error is found at compile time if any error is found in your queries. Drift be used alongside build_runner. Cons:# Drift generates all the boilerplate for you which leads to less flexibility. When to use Drift:# Drift handles most of the heavy lifting involved in writing our queries for you. It produces strong types of results that reduce the chances of runtime errors. Drift is feature rich library and is supported on many platforms. Good to go if you don&rsquo;t want to write all queries manually or new with databases.
Floor# Floor is inspired by the Room persistence library android and it provides an abstraction layer over SQLite. Floor automatically maps in-memory objects and database rows while providing full control over the database.
Pros:# Floor is typesafe, null-safe, and reactive lightweight framework support iOS, Android, Linux, macOS, and Windows. Cons:# need to run the code generator again for any changes in the database When to use Floor:# When you want a relational database or have some experience using a room persistence library. If you do not want to write all the queries manually or are not comfortable writing them.
Non-Relational database option for flutter# Firebase# Firebase saves your data on the cloud, this synchronizes all your data in multiple devices.
Firebase provides more than one option to store data: Firebase Storage, Firebase Firestore, and the Realtime Database. The database can be chosen based on your use case and the type of data you want to store. For simple document storage, the Firebase Firestore works very well in most of cases.
Firebase has one of the best documentation which is easy to understand and you will find out them useful in most of your problems.
Firebase provides a free tier plan that provides most of the services available with a generous amount of usage.
Pros:# Consise documentation. Wide range of services and features at a low cost. A generous free tier plan. Tools available to automate the integration process in flutter ( Flutterfire ). Cons:# Limited querying capabilities. Reply on third-party plugins for the search features in the database (Algolia ). Limited data migration. Platform dependent. When to use Firebase?# If data is needed to synchronize between many devices. Need an online database with less or no fee then firebase then it is a good choice.
Hive# Hive is a lightweight and fast key-value database written in pure Dart. Inspired by Bitcask. Hive is an offline non-SQL option available for flutter.
Pros:# Great performance (see benchmark) Strong encryption built in. Simple, powerful, &amp; intuitive API support mobile, desktop, and browser Cons:# Not recommended for complex data model The efficiency of Hive is relatively low When to use Hive?# If you are just after a simple non-SQL database to store data offline on the device and do not need the data syncronization across all the devices like firebase and if you want something that works anywhere, Hive is for you.
Now you must a clear idea of all the popular database options available for the flutter application, and their pros, and cons. I hope this will help you to choose the right database for your application.
After all, which database is good for you boils down to your requirements.
`}).add({id:9,href:"/blog/flutter/how-to-create-bottom-sheet-in-flutter/",title:"How to create bottom sheet in Flutter",description:`In this blog, we will learn about the modal bottom sheet widget in Flutter. We will learn about the bottom sheet and where you should use them. We will also implement the Modal Bottom Sheet Widget and later we will modify it to make it scrollable.
For those of you who are trying to remember when was the last time you use to interact with the bottom sheet, The share button present in android opens up a drawer from the bottom that allows the user to select the way to share is an example of a bottom sheet.`,content:`In this blog, we will learn about the modal bottom sheet widget in Flutter. We will learn about the bottom sheet and where you should use them. We will also implement the Modal Bottom Sheet Widget and later we will modify it to make it scrollable.
For those of you who are trying to remember when was the last time you use to interact with the bottom sheet, The share button present in android opens up a drawer from the bottom that allows the user to select the way to share is an example of a bottom sheet.
What is Modal Bottom Sheet?# The modal bottom sheet is a widget present in Flutter that opens an interactive drawer from the bottom of the application that allows you to display the widget. The bottom sheet will appear over other UI elements thus it prevents the user to interact with other components of apps.
When to use Modal Bottom Sheet?# The Modal Bottom Sheet is used when you want to create space for more content in your app.
It is used when you don\u2019t want to build a separate screen for some functionality in your app that can be served without navigating the current page to another.
The modal bottom Sheet is shown in response to the user action to which it is mapped. For example, clicking on a button or icon.
The showModelBottomSheet function# To display and create a modal bottom sheet we have to use the **showModeBottomSheet **function.
These are the showModalBottomSheet function properties.
Future&lt;T?&gt; showModalBottomSheet&lt;T&gt;({ required BuildContext context, required WidgetBuilder builder, Color? backgroundColor, double? elevation, ShapeBorder? shape, Clip? clipBehavior, BoxConstraints? constraints, Color? barrierColor, bool isScrollControlled = false, bool useRootNavigator = false, bool isDismissible = true, bool enableDrag = true, RouteSettings? routeSettings, AnimationController? transitionAnimationController, Offset? anchorPoint, }) There are two required properties of showModalBottomSheet:
**BuildContext: **Each widget in a tree is tracked by a locator called BuildContext, which also identifies each widget\u2019s location inside the tree. Think of BuildContext as a location of the widget in the widget tree.
WidgetBuilder: the WidgetBuilder takes in a context and returns a widget. In our case, the returned widget will be Bottom Sheet.
How to create a Bottom Sheet in Flutter# To demonstrate how to use the modal bottom sheet, I have created a project with a bottom_sheet.dart file that contains a stateful widget name CustomBottomSheet. This widget is passed into the home property of MaterialApp.
import 'package:flutter/material.dart'; class CustomBottomSheet extends StatefulWidget { const CustomBottomSheet({super.key}); @override State&lt;CustomBottomSheet&gt; createState() =&gt; _CustomBottomSheetState(); } class _CustomBottomSheetState extends State&lt;CustomBottomSheet&gt; { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text(&quot;Geek Aid&quot;), centerTitle: true, ), body: Center( child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [ ElevatedButton( onPressed: () =&gt; showModalBottomSheet( context: context, builder: (context) =&gt; buildSheet(context)), child: const Text(&quot;Bottom Sheet&quot;)) ]), ), ); } Widget buildSheet(context) { return Column(); } } The CustomBottomSheet returns a scaffold with an appBar and body. The body contains an elevated button that is centered, in onPressed an arrow function is used and the showModalBottomSheet widget is passed, and both the required property context and builder are passed.
In simple words, the button triggers the bottom sheet.
The buildSheet will draw the UI of our bottom sheet. The buildSheet widget will contain widgets that we want to display in the bottom sheet
Widget buildSheet(context) { return Container( color: Colors.white, padding: const EdgeInsets.all(16), child: Column(children: &lt;Widget&gt;[ Container( width: 150, height: 150, decoration: const BoxDecoration( shape: BoxShape.circle, image: DecorationImage( fit: BoxFit.fill, image: AssetImage('assets/logo.png'), ), ), ), const Divider(height: 40), const Text( &quot;Lorem ipsum ...... laborum.&quot;), ])); } This is how the bottom sheet will look after being populated by the widgets mentioned. The container contains an image widget and a text widget to display sample text.
The bottom sheet will work fine for most cases but if you want the sheet to take up the full space and needed the content inside to be scrollable then, we need to wrap the container with **DraggableScrollableSheet **and replace the inside container with ListView.
class _CustomBottomSheetState extends State&lt;CustomBottomSheet&gt; { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text(&quot;Geek Aid&quot;), centerTitle: true, ), body: Center( child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [ ElevatedButton( onPressed: () =&gt; showModalBottomSheet( backgroundColor: Colors.transparent, //New isScrollControlled: true, //New context: context, builder: (context) =&gt; buildSheet(context)), child: const Text(&quot;Bottom Sheet&quot;)) ]), ), ); } Widget buildSheet(context) { return DraggableScrollableSheet( initialChildSize: 0.6, //New maxChildSize: 0.9, // New minChildSize: 0.5, //New builder: (_, controller) =&gt; Container( //New color: Colors.white, padding: const EdgeInsets.all(16), child: ListView( //New controller: controller, //New children: [ Container( width: 200, height: 200, decoration: const BoxDecoration( shape: BoxShape.circle, image: DecorationImage( fit: BoxFit.fitHeight, image: AssetImage('assets/logo.png'), ), ), ), const Divider(height: 40), const Text( &quot;Lorem ... laborum.&quot;), const SizedBox(height: 20,), const Text(&quot;Lorem ... laborum.&quot;) ], ), )); } } To make the bottom sheet scrollable first we need to make the
isScrollControlled to true and make the background transparent to enhance the UI look in the showModalBottomSheet.
In the buildSheet, we wrap the container with DraggableScrollableSheet, from the builder we get context and scrollController. We change the column to show ListView and pass the scrollController to the ListView.
initialChildSize: This set the initial height of the bottom sheet when the sheet appears every time on the event it is mapped to.
maxChildSize: This set the maximum height of the bottom sheet that can cover by the bottom sheet.
minChildSize: This set the minimum height of the bottom sheet, the bottom sheet collapsed when the height of the sheet drops below the minChildSize.
This solves some of our problems but comes with its own, Now if you have noticed the bottom sheet did not close when clicked outside the sheet. To achieve this there is a workaround that we can use.
class _CustomBottomSheetState extends State&lt;CustomBottomSheet&gt; { @override Widget build(BuildContext context) { return Scaffold( . . body: Center( child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [ ElevatedButton( onPressed: () =&gt; showModalBottomSheet( . . builder: (context) =&gt; makeDismissible(child: buildSheet(), context: context)), //new child: const Text(&quot;Bottom Sheet&quot;)) ]), ), ); } //New Widget makeDismissible( {required Widget child, required BuildContext context}) =&gt; GestureDetector( behavior: HitTestBehavior.opaque, onTap: () =&gt; Navigator.pop(context), child: GestureDetector( onTap: () {}, child: child, ), ); makeDismissble is a widget that I have to build to solve the above problem, there are two parameters required a child that will be our bottom sheet (buildSheet) widget and context for the navigator to work.
Replace the buidSheet in showModalBottomSheet from makeDismissible and pass buildSheet and context as parameters.
Conclusion# In this article, I tried to explain how to use showModalBottomSheet, which you can modify according to your own. We explore how to make it scrollable and how to achieve the tap close feature.
I hope this article will help you to learn about the bottom sheet and the different ways you can use it in your apps.
If I got something wrong, Inform me on my social media accounts and feel free to contact me and help me to correct it, I would love to improve and rectify my mistake.
\u2764\uFE0F\u2764\uFE0F Thanks for reading this article \u2764\uFE0F\u2764\uFE0F
`}).add({id:10,href:"/blog/flutter/know-the-widgets-in-flutter-scaffold/",title:"Know the Widgets in Flutter: Scaffold",description:`You are reading this post means you have just started learning flutter, and now every tutorial or codelab you open you came across a widget named Scaffold. Do not worry after reading this blog post you will have a clear understanding of Scaffold.
If you have any problem setting up your flutter development environment refer to my flutter installation post where you can find a step-by-step guide.
Let&rsquo;s get started.`,content:`You are reading this post means you have just started learning flutter, and now every tutorial or codelab you open you came across a widget named Scaffold. Do not worry after reading this blog post you will have a clear understanding of Scaffold.
If you have any problem setting up your flutter development environment refer to my flutter installation post where you can find a step-by-step guide.
Let&rsquo;s get started.
What is a Widget?# The Flutter app&rsquo;s screens are made up entirely of widgets. You build the UI using widgets and the appearance of the UI depends on the choice and sequence of the Widget. Some examples of widgets are Scaffold, Text, etc.
Now you have a clear idea about widgets we can move forward to the scaffold, in this blog post we will be discussing the basics of Scaffold.
What is Scaffold?# The Scaffold is a widget in Flutter used to implement the basic material **design visual layout structure.** It provides APIs for showing drawers, app bars, bottom navigation, and bottom sheets.
In simple words, Scaffold provides you with a structure where you put widgets according to your needs while simultaneously following material design.
The following are the Scaffold constructor and properties.
const Scaffold({ super.key, this.appBar, this.body, this.floatingActionButton, this.floatingActionButtonLocation, this.floatingActionButtonAnimator, this.persistentFooterButtons, this.persistentFooterAlignment = AlignmentDirectional.centerEnd, this.drawer, this.onDrawerChanged, this.endDrawer, this.onEndDrawerChanged, this.bottomNavigationBar, this.bottomSheet, this.backgroundColor, this.resizeToAvoidBottomInset, this.primary = true, this.drawerDragStartBehavior = DragStartBehavior.start, this.extendBody = false, this.extendBodyBehindAppBar = false, this.drawerScrimColor, this.drawerEdgeDragWidth, this.drawerEnableOpenDragGesture = true, this.endDrawerEnableOpenDragGesture = true, this.restorationId, }) Let&rsquo;s take a look glance at Scaffold properties individually.
1. appBar# This is a horizontal bar placed at the top of the app UI. appBar in Scaffold used AppBar Widget which has properties like title, elevation, brightness, etc.
Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&#34;GeekAid&#34;)), ); } Appbar
Here, the appBar with the title property uses the Text widget to display the text &ldquo;GeekAid&rdquo; on the appBar.
2. body# The body is another essential property of the Scaffold, it is the space present below the appBar and behind the floatingActionButton.
Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&#34;GeekAid&#34;)), body: const Center( child: Text( &#34;Scaffold Demo&#34;, style: TextStyle(fontSize: 40), )), ); } Body
Here, the body property of the Scaffold uses a Center to center alignment (horizontally and vertically) of the content and Text widget to display the text &ldquo;Scaffold Demo&rdquo;.
3. floatingActionButton# a floatinActionButton is a button that is displayed at the bottom right corner floating above the body. floatingActionButton is used to promote some primary action in the app example: add.
floatingActionButton uses the FloatingActionButton widget to display the button.
Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&#34;GeekAid&#34;)), body: const Center( child: Text( &#34;Scaffold Demo&#34;, style: TextStyle(fontSize: 40), )), floatingActionButton: FloatingActionButton( elevation: 10, child: const Icon(Icons.add), onPressed: () { print(&#34;flatingActionButton pressed&#34;); }, ), ); } Floating Action Button
Here, the floatingActionButton property of Scaffold uses the FloatingActionButton widget to display a floating button at the bottom right corner. It uses an Icon widget to display the icon.
4. drawer# The drawer is a side panel or slider menu which is generally hidden in mobile devices and which can be accessed by sliding left to right or vice versa.
If you use a drawer in the app an icon is automatically added in the appBar at appropriate positions which can be used to access the drawer.
drawer: Drawer( elevation: 12, child: ListView( children: const &lt;Widget&gt;[ DrawerHeader( decoration: BoxDecoration(color: Colors.orange), child: Center( child: Text(&#34;Geek Aid&#34;, style: TextStyle(fontSize: 40)))), ListTile( title: Text(&#34;Item 1&#34;), ), ListTile( title: Text(&#34;Item 2&#34;), ) ], ), ), Drawer
Here, the drawer property of Scaffold uses the Drawer widget to display the sliding menu. The DrawerHeader widget is used to display the header of the drawer and ListTile to display the menu items.
5. persistentFooterButtons# The persistentFooterButtons are placed at bottom of the Scaffold if used with bottomNavigationBar and floatingActionButton then it lies above the bottomNavigationBar and below the floatingActionButton.
persistentFooterButtons remain at their assigned positions even if the body content is scrolled as the name suggests they remain persistently visible.
persistentFooterButtons: &lt;Widget&gt;[ ElevatedButton(onPressed: () {}, child: const Icon(Icons.search)), ElevatedButton(onPressed: () {}, child: const Icon(Icons.send)), ], Persistent Footer Button
Here, the persistentFooterButtons property of the Scaffold uses a list of widgets to display the widgets above the bottomNavigationBar.
6. bottomNavigationBar# bottomNavigationBar is used to render bottom Navigation below the persistentBotterButtons.
bottomNavigationBar: BottomNavigationBar( currentIndex: 0, items: const [ BottomNavigationBarItem(label: &#34;Home&#34;, icon: Icon(Icons.home)), BottomNavigationBarItem(label: &#34;Search&#34;, icon: Icon(Icons.search)), BottomNavigationBarItem(label: &#34;Lock&#34;, icon: Icon(Icons.lock)), ], ), Bottom Navigation Bar
Here, the bottomNavigationBar property of the Scaffold uses the BottomNavigationBar widget to display the bottomNavigationBar. BottomNavigationBarItem is used to display the navigation icon and add a label to it.
These are some primary properties of scaffold we have discussed, now go ahead and start tweaking these properties one at a time to get a clear understanding and hands-on.
`}).add({id:11,href:"/blog/flutter/how-to-make-bottom-navigation-bar-in-flutter/",title:"How to make the Bottom Navigation Bar in the Flutter",description:`Hey, there I hope your journey to learn flutter is going smoothly, and now you are stuck with how you can add the BottomNavigtionBar widget in your application.
Here I am by the end of the post you will be able to create a bottom navigation bar for your application and tweak the look and feel of the bar according to your preference.
What we will cover
What is Bottom Navigation Bar in Flutter?`,content:`Hey, there I hope your journey to learn flutter is going smoothly, and now you are stuck with how you can add the BottomNavigtionBar widget in your application.
Here I am by the end of the post you will be able to create a bottom navigation bar for your application and tweak the look and feel of the bar according to your preference.
What we will cover
What is Bottom Navigation Bar in Flutter?
Adding BottomNavigationBar and BottomNavigationBarItem.
Making bottom navigation bar items interactive.
Adding navigation.
Customizing the bottom navigation bar.
What does in Flutter Bottom Navigation Bar mean?# BottomNavigationBar is a widget that displays a row of widgets at the bottom of the application. The widget displayed at the bottom can be used to quickly navigate between screens or pages. BottomNavigationBar contains four to five icons.
Now let\u2019s start working on our BottomNavigationBar in a flutter.# To demonstrate how to make one I have created a project that contains three screens, named home, search, and profile. All the screens are stateless widgets containing a Text widget containing their respective names.
import 'package:flutter/material.dart'; class BottomBar extends StatefulWidget { const BottomBar({super.key}); @override State&lt;BottomBar&gt; createState() =&gt; _BottomBarState(); } class _BottomBarState extends State&lt;BottomBar&gt; { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&quot;Bottom Bar&quot;)), body: const Center(child: Text(&quot;Bottom Bar&quot;)), ); } } This is a dart file name bottom_bar, I will be writing and editing this file to add a bottom navigation bar in a flutter.
Adding BottomNavigationBar and BottomNavigationBaritem# The BottomNavigationBar widget is passed to the bottomNaivgationBar property of the scaffold and, a list of widgets is required to display items in BottomNavigationbar,
return Scaffold( appBar: AppBar(title: const Text(&quot;Bottom Bar&quot;)), body: const HomeScreen(), bottomNavigationBar: BottomNavigationBar( selectedItemColor: Colors.blueGrey, unselectedItemColor: const Color(0xFF526488), items: const [ BottomNavigationBarItem( label: 'Home', icon: Icon(FluentSystemIcons.ic_fluent_home_regular), activeIcon: Icon(FluentSystemIcons.ic_fluent_home_filled)), BottomNavigationBarItem( label: 'Search', icon: Icon(FluentSystemIcons.ic_fluent_search_regular), activeIcon: Icon(FluentSystemIcons.ic_fluent_search_filled)), BottomNavigationBarItem( label: 'Person', icon: Icon(FluentSystemIcons.ic_fluent_person_accounts_regular), activeIcon: Icon(FluentSystemIcons.ic_fluent_person_accounts_filled)), ]), ); BottomNavigationBar requires the items property to display the items. Items require a list of widgets of type BottomNavigationBarItem.
BottomNavigationBarItem holds the data of the actual item to display in the navigation bar.
BottomNavigationBarItem requires two properties that are **label **and an icon, I have used another property called activeIcon which displays another icon if that item is selected by the user.
Making the items interactive# To achieve this we will make a variable, and use the currentIndex, and on onTap properties of BottomNavigationBar.
class _BottomBarState extends State&lt;BottomBar&gt; { int _selectedIndex = 0; //New void _onItemTap(int index) { //New setState(() { _selectedIndex = index; }); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&quot;Bottom Bar&quot;)), body: const HomeScreen(), bottomNavigationBar: BottomNavigationBar( currentIndex: _selectedIndex, //New onTap: _onItemTap, //New . . items: const [ . . ); } } The _selectedIndex variable will hold the index of the selected item which will be used by the currentIndex property to update the index.
The **onItemTap **is a function that is passed to the onTap callback which passes the selected index to the function. We simply use the returned index to update the state of **_selectedIndex **and this will update the item selected in the bottom navigation bar.
Adding navigation# To display the page or screen of the selected item we will make a list of screens. I will use the pages I created at the start in the respective order of the items in the bottom navigation bar.
class _BottomBarState extends State&lt;BottomBar&gt; { int _selectedIndex = 0; static final List&lt;Widget&gt; _pages = &lt;Widget&gt;[ //New const HomeScreen(), const SearchScreen(), const ProfileScreen(), ]; . . @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&quot;Bottom Bar&quot;)), body: _pages[_selectedIndex], //New bottomNavigationBar: BottomNavigationBar( currentIndex: _selectedIndex, . . items: const [ . . ]), ); } } The **_pages **is a list of widgets that contain the pages.
To show the pages in the body we will the _selectedIndex variable to update the content of the body as shown in the code.
Removing the labels# Now you have seen that whenever you click on the item a pop-up comes up with the name of the item. It is quite annoying in the mobile application so let\u2019s remove it.
class _BottomBarState extends State&lt;BottomBar&gt; { . . @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&quot;Bottom Bar&quot;)), body: _screenList[_selectedIndex], bottomNavigationBar: BottomNavigationBar( . . showSelectedLabels: false, //New showUnselectedLabels: false, //New . . items: const [ . . ]), ); } } To remove the labels we have set the showSelectedLabels and showUnselectedLabels properties of BottomNavitionBar to false.
Changing the appearance of the selected and unselected item# Selected Item# If you want to change the appearance of the selected item then you can play with some properties like selectedItemColor, and selectedIconTheme. I have turned off the labels but if you didn\u2019t then selectedLabelStyle can be used to change the label style
class _BottomBarState extends State&lt;BottomBar&gt; { . . @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&quot;Bottom Bar&quot;)), body: _screenList[_selectedIndex], bottomNavigationBar: BottomNavigationBar( selectedIconTheme: const IconThemeData(color: Colors.blue, size: 40), //New selectedItemColor: Colors.blueGrey, //New selectedLabelStyle: const TextStyle(fontWeight: FontWeight.bold), //New items: const [ . . ]), ); } } Unselected Items# If you also want to change the appearance of unselected items then you can play with some properties like **unselectedIconTheme **and unselectedIconColor.
class _BottomBarState extends State&lt;BottomBar&gt; { . . @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&quot;Bottom Bar&quot;)), body: _screenList[_selectedIndex], bottomNavigationBar: BottomNavigationBar( currentIndex: _selectedIndex, unselectedIconTheme: const IconThemeData(color: Color(0xFF526488) ) //New, unselectedItemColor: const Color(0xFF526488), // New items: const [ . . ]), ); } } Generally, I do not color or change the theme of unselected items to some funky shining as it may mislead users or confuse them with the selected item.
Changing the BottomNavigationbar type# Now, you have interacted with the bottom navigation bar then you have found out that the icons are shifting when you change the selected item.
Those who are ok with it are, fine but those who want to fix it
add the type property to BottomNavigationBar and change it to fix, by default it is shifting.
Here is the full code of the Bottom Navigation Bar# class BottomBar extends StatefulWidget { const BottomBar({super.key}); @override State&lt;BottomBar&gt; createState() =&gt; _BottomBarState(); } class _BottomBarState extends State&lt;BottomBar&gt; { int _selectedIndex = 0; static final List&lt;Widget&gt; _screenList = &lt;Widget&gt;[ const HomeScreen(), const SearchScreen(), const ProfileScreen(), ]; void onItemTap(int index) { setState(() { _selectedIndex = index; }); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: const Text(&quot;Bottom Bar&quot;)), body: _screenList[_selectedIndex], bottomNavigationBar: BottomNavigationBar( currentIndex: _selectedIndex, selectedIconTheme: const IconThemeData(color: Colors.blue, size: 30), onTap: onItemTap, elevation: 10, selectedItemColor: Colors.blueGrey, showSelectedLabels: false, showUnselectedLabels: false, type: BottomNavigationBarType.fixed, unselectedItemColor: const Color(0xFF526488), items: const [ BottomNavigationBarItem( label: 'Home', icon: Icon(FluentSystemIcons.ic_fluent_home_regular), activeIcon: Icon(FluentSystemIcons.ic_fluent_home_filled)), BottomNavigationBarItem( label: 'Search', icon: Icon(FluentSystemIcons.ic_fluent_search_regular), activeIcon: Icon(FluentSystemIcons.ic_fluent_search_filled)), BottomNavigationBarItem( label: 'Person', icon: Icon(FluentSystemIcons.ic_fluent_person_accounts_regular), activeIcon: Icon(FluentSystemIcons.ic_fluent_person_accounts_filled)), ]), ); } } This is how you can add a bottom navigation bar in your flutter application and tweak its properties to change its look and feel.
To learn more about the navigation bar in flutter you can always refer to the documentation.
Need to know about scaffolds then refer to the Know the widget: Scaffold post where you will learn about all the properties a beginner needs to know.
`}).add({id:12,href:"/blog/flutter/how-to-setup-flutter-dev-environment-in-linux-using-android-studio/",title:"How to set up your flutter development environment",description:`&ldquo;For the best return on your money, pour your purse into your head&rdquo;
Hurry! now you have decided to learn flutter and it will be a good decision. Your journey will be full of hurdles but the whole community and I are here to help you out so relax.
The first hurdle you are facing is how to set up your development environment, Let&rsquo;s get started.
Open docs.flutter.dev and select your operating system.`,content:`&ldquo;For the best return on your money, pour your purse into your head&rdquo;
Hurry! now you have decided to learn flutter and it will be a good decision. Your journey will be full of hurdles but the whole community and I are here to help you out so relax.
The first hurdle you are facing is how to set up your development environment, Let&rsquo;s get started.
Open docs.flutter.dev and select your operating system. I will be giving general steps here to install flutter, the documentation is very clear and I will address the common issue you will face.
#1. Download and install Android Studio# You will need an IDE to write code you can choose some other IDE but google recommends android studio and we will also install it.
To download android studio visit developer.android.com.
The installation is pretty simple to open the installer and give it the required permission read the term and conditions which no one does.
Allow android studio to download the latest SDK and some other files for its smooth functioning.
#2. Download flutter SDK# for windows and mac users you can either download the zip file or clone the stable version from GitHub.
Linux users can use snap to install or else apt repository.
Choose your operating system
#3. Add the path# The next step is to add a flutter/bin path to the global variables so that you can use the flutter cmd globally.
Windows:-Open the start menu and type env from the results select Edit environment variables for your account.
Click on add new path and paste the path flutter/bin append the path before this if exists.
Mac:-Extract the file to the desired location.
example:
$ cd ~/geekAid $ unzip ~/Downloads/flutter_macos_3.3.6-stable.zip Add flutter to your path, open the terminal at the install location and paste this cmd.
$ export PATH=&#34;$PATH:\`pwd\`/flutter/bin&#34; To add flutter to your path refer to this.
Linux:-If you have used snap to install flutter then you are good to go. You can use the cmd given below to check the flutter path.
$ https://docs.flutter.dev/get-started/install/macos#update-your-path You can also add the flutter path to the terminal temporarily, but I just go ahead and add it permanently.
You can refer to this article to add flutter to your path refer it.
#4. Run flutter doctor# To check the flutter installation is done properly and that there are no issues present open the terminal and write the cmd &quot; flutter doctor&quot; and hit enter.
$ flutter doctor If you got all the green flags then you are good to go.
But this will not be the case for many of you. Here I will discuss the most common issue here.
Flutter SDK not found in the specified locationYou can install it from Android Studio.
Menu &gt; Tools &gt; SDK Manager &gt; Android SDK &gt; SDK Tools (tab)
Install the missing SDK
From here find the missing dependency and install it.
Flutter run error: You have not accepted the license agreementsTo accept the license and go ahead open the terminal and run the cmd
$ flutter doctor --android-licenses Now, after resolving the error run again &ldquo;flutter doctor&rdquo; to check for further issues.
If you still facing issues I suggest you try to find that issue on StackOverflow and resolve it.
#5. Installing the required plugins in android studio# These plugins give you run &amp; debug support, syntax highlighting, code completion, widget editing assistance, and more.
To install plugins go to settings by &lsquo;Ctrl+Alt+S&rsquo; or Menu&gt; File &gt; Settings.
In the setting open the plugin sections.
search and install plugins
You need to install two plugins and search for them in the marketplace
flutter dart Once installed restart the IDE and you are good to go.
`}).add({id:13,href:"/blog/android/how-to-connect-android-studio-with-firebase/",title:"How to connect android studio with firebase.",description:`I am sure you have started your journey of learning android development and then this mountain of problems came, but do not worry I help you out just follow the steps and follow my lead.
The first step is to make an account on Firebase. Now you have made one let&rsquo;s get started.
Open the ram eater, oops! I mean android studio and Firebase in the browser in the Firebase`,content:`I am sure you have started your journey of learning android development and then this mountain of problems came, but do not worry I help you out just follow the steps and follow my lead.
The first step is to make an account on Firebase. Now you have made one let&rsquo;s get started.
Open the ram eater, oops! I mean android studio and Firebase in the browser in the Firebase
Follow the steps# 1. Create a project on firebase# Open your firebase account and click on Add project
1
2. Project Name and other details# Give your project a name in my case I have used the name &ldquo;Test&rdquo; and click on continue. For now, we will turn off google analytics and proceed, click on create a project and sit back and relax till firebase creates your project.
analytics
3. Adding firebase to App# Click on the android icon and now we have a list of tasks to do.
First, you fill in the package name, you can find the package name in the build.gradle, and in the file under the namespace, you can find your package name.
2
Well, some services of firebase require a SHA1 key and I know it took me a while to out find how to get one. Fire up the android studio and open the run anything cmd executer to open &ldquo;run anything&rdquo; double press the ctrl button and in the window type &ldquo;signingReport&rdquo; and hit enter.
3
Now a window will open and it will be showing your MD5, SHA1 and SHA256 keys from here copy SHA1 and paste it into the SHA1 input box on the firebase page.
4
Now, click on the register.
4. Add the config file# Download the config file and copy it. Now open android studio and there change the view from android to project, move to the app &gt; src directory, and paste the file here.
5
Now go to the firebase page and click on next.
5. Add firebase SDK# In this step simply copy the dependencies mentioned and paste them into the mentioned Gradle files. You have two build.gradle file one is app level and another is module level.
Note:- those who use Gradle 7.+ will not see any dependency section in the build script in the project-level Gradle file so simply add the dependency section.
Now your app is successfully connected to firebase.
To learn how to use Firebase services I suggest you build some projects using it and I think the notes application is one of the best projects beginner-level application that you can build to learn Firebase. Here are some suggestions use Firebase authentication to provide auth service to the app, use the cloud store as a database and store the notes of the user and just see some services like analytics, crash analytics, and messaging that Firebase provides, these services you will be needing when you publish your apps as these will allow you to monitor the crashes and app performance.
`}).add({id:14,href:"/blog/android/how-to-use-date-picker-in-jetpack-compose/",title:"How to use Date Picker in Jetpack Compose",description:`Few Days ago I was working on my project and at that moment I came across a problem which how can I use date picker in compose.
So, google it and find and came across solution which fine and you can modify it according to your needs in your project.
package com.geekaid.sdejobs.ui.screens import android.app.DatePickerDialog import android.widget.DatePicker import androidx.compose.material.OutlinedButton import androidx.compose.material.Text import androidx.compose.runtime.* import androidx.compose.ui.platform.LocalContext import java.util.* @Composable fun Calender() { var datePicked by remember { mutableStateOf(&#34;1&#34;) } val context = LocalContext.`,content:`Few Days ago I was working on my project and at that moment I came across a problem which how can I use date picker in compose.
So, google it and find and came across solution which fine and you can modify it according to your needs in your project.
package com.geekaid.sdejobs.ui.screens import android.app.DatePickerDialog import android.widget.DatePicker import androidx.compose.material.OutlinedButton import androidx.compose.material.Text import androidx.compose.runtime.* import androidx.compose.ui.platform.LocalContext import java.util.* @Composable fun Calender() { var datePicked by remember { mutableStateOf(&#34;1&#34;) } val context = LocalContext.current val year: Int val month: Int val day: Int val calendar = Calendar.getInstance() year = calendar.get(Calendar.YEAR) month = calendar.get(Calendar.MONTH) day = calendar.get(Calendar.DAY_OF_MONTH) calendar.time = Date() val datePickerDialog = DatePickerDialog( context, { _: DatePicker, year: Int, month: Int, dayOfMonth: Int -&gt; datePicked = &#34;$dayOfMonth/$month/$year&#34; }, year, month, day ) OutlinedButton(onClick = { datePickerDialog.show() }) { Text(text = &#34;Pick Date&#34;) } } `}),$.addEventListener("input",function(){let n=this.value,i=e.search(n,5,{enrich:!0}),s=new Map;for(let r of i.flatMap(l=>l.result))s.has(r.href)||s.set(r.doc.href,r.doc);if(j.innerHTML="",j.classList.remove("search__suggestions--hidden"),s.size===0&&n){let r=document.createElement("div");r.innerHTML=`No results for "<strong>${n}</strong>"`,r.classList.add("search__no-results"),j.appendChild(r);return}for(let[r,l]of s){let h=document.createElement("a");h.href=r,h.classList.add("search__suggestion-item"),j.appendChild(h);let p=document.createElement("div");p.textContent=l.title,p.classList.add("search__suggestion-title"),h.appendChild(p);let f=document.createElement("div");if(f.textContent=l.description,f.classList.add("search__suggestion-description"),h.appendChild(f),j.childElementCount===5)break}})})();})();
//! Source: https://github.com/h-enk/doks/blob/master/assets/js/index.js
/*! Source: https://dev.to/shubhamprakash/trap-focus-using-javascript-6a3 */
//! Source: https://discourse.gohugo.io/t/range-length-or-last-element/3803/2
